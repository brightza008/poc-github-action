name: POC-env-variable
on: 
  push:
    branches: [ action-ci ]
    paths:
      - .github/workflows/env-variable.yaml

env: 
    global_var1: HOUSE
    docker_user: ${{vars.MY_DOCKER_USERNAME}}
    docker_password: ${{secrets.MY_DOCKER_PASSWORD}}

jobs: 
    poc_env_var: 
      runs-on: ubuntu-latest
      name: Print Global Env
      env:
        injob_var1: ROOM
      steps:
        - name: run echo
          run: |
            echo -e "global var= ${global_var1} \n in job var= ${injob_var1} \nDocker Username= ${docker_user} \n Docker Password= ${docker_password}"

# expose variable environment into reuse-workflow #
    env_workflow:
      runs-on: ubuntu-latest
      name: Setup Output Env
      outputs: 
        user: ${{env.docker_user}}
        pass: ${{env.docker_password}}
      steps:
      - run: |
          echo "Exposing env vars"
          echo -e "print user:${user} \npass: ${pass}"
# Note 
# To use the reuse-workflow 
# can't use `${{env.variable}}` into the workflow it need to setup variable output as The Jobs above 
# The “with” statement that supplies arguments can only take elements from the github context and the “needs” object, 
# so you MUST have a line that “needs” the job where you set the values and return the outputs. then use `${{needs.JOBS.output.OUTPUT_NAME}}` 
    invoke-workflow:
      needs: env_workflow
      name: "inject env into reuse-workflow"
      uses: brightza008/poc-github-action/.github/workflows/docker-build.yaml@workflow
      with:
        username: ${{ needs.env_workflow.outputs.user }}
      secrets:
        # token: ${{ needs.env_workflow.outputs.pass }}
        token: ${{secrets.MY_DOCKER_PASSWORD}}

    