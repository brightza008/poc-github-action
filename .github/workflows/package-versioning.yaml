name: POC_package_versioning
on: 
    workflow_dispatch:
    push:
        branches: [ action-ci ]
        paths:
            - .github/workflows/package-versioning.yaml

jobs:
  package-versioning:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: json property
        id: json_properties
        run: |
          echo "RELEASE_TAG=$(jq -r .version package.json)" >> $GITHUB_OUTPUT
      - run: |
          echo "Build tag==> ${{ steps.json_properties.outputs.RELEASE_TAG }}"

      - name: Install Groovy
        run: |
          sudo apt-get update
          sudo apt-get install groovy -y

      - run: |
          echo "today=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
          echo " DATE TODAY: ${today}"
        #   groovy -e """
        #     def now = new Date();
        #     def today = now.format("yMMdd", TimeZone.getTimeZone('Asia/Bangkok'))
        #     println ${today}
        #   """

      - name: Example Dev env.
        run: |
          groovy -e '''
              def json = new File("package.json").text
              def parsedJson = new groovy.json.JsonSlurper().parseText(json)
              def packageVersionInJson =  parsedJson.version
              println "${packageVersionInJson}"
              println "Package Version (package.json): ${packageVersionInJson}"

                def versionSplit = packageVersionInJson.split("\\.")
                int lastDigitVersion = "${versionSplit[versionSplit.size() - 1]}".toInteger()
                String perfixVersion = "${versionSplit[0]}.${versionSplit[1]}"
                int nextVersion = lastDigitVersion + 1
                String newVersion = "${perfixVersion}.${nextVersion}"
                PackageVersion = "${newVersion}".trim()

                println "Final Version: ${PackageVersion}"
          '''

      - name: Example SIT env.
        run: |
          groovy -e """
              def json = new File("package.json").text
              def parsedJson = new groovy.json.JsonSlurper().parseText(json)
              def packageVersionInJson =  parsedJson.version
              println "${packageVersionInJson}"
              println "Package Version \(package.json\): ${packageVersionInJson}"

                def now = new Date();
                def today = now.format("yMMdd", TimeZone.getTimeZone('Asia/Bangkok'))

                PackageVersion = "${packageVersionInJson}-${today}-${env.BUILD_NUMBER}".trim()
                println "Final Version: ${PackageVersion}"
          """
          


